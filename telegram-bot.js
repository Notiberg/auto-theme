// Telegram Bot Integration for Booking Notifications
class TelegramBot {
    constructor() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        this.botToken = 'YOUR_BOT_TOKEN'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        this.apiUrl = `https://api.telegram.org/bot${this.botToken}`;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram WebApp
        this.initTelegramWebApp();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    initTelegramWebApp() {
        if (window.Telegram && window.Telegram.WebApp) {
            this.tg = window.Telegram.WebApp;
            this.tg.ready();
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            this.user = this.tg.initDataUnsafe?.user;
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            this.tg.MainButton.setText('–ó–∞–∫—Ä—ã—Ç—å');
            this.tg.MainButton.onClick(() => {
                this.tg.close();
            });
        } else {
            console.log('Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞');
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
    async sendBookingConfirmation(bookingData) {
        if (!this.user || !this.user.id) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
            this.showLocalNotification(bookingData);
            return;
        }

        const message = this.formatBookingMessage(bookingData);
        
        try {
            const response = await fetch(`${this.apiUrl}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: this.user.id,
                    text: message,
                    parse_mode: 'HTML'
                })
            });

            if (response.ok) {
                console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
                this.showSuccessMessage();
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            this.showLocalNotification(bookingData);
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏
    formatBookingMessage(bookingData) {
        const { service, date, day, month, time, address, car } = bookingData;
        
        return `üéâ <b>–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>

üöó <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> ${car.brand} ${car.model} (${car.regNumber})
üõ† <b>–£—Å–ª—É–≥–∞:</b> ${service}
üìÖ <b>–î–∞—Ç–∞:</b> ${day}, ${date} ${month}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${time}
üìç <b>–ê–¥—Ä–µ—Å:</b> ${address}

‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –º–æ–π–∫–∏.

üì± –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Slot My Car.`;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
    showLocalNotification(bookingData) {
        const { service, date, day, month, time, address, car } = bookingData;
        
        const message = `üéâ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!

üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${car.brand} ${car.model} (${car.regNumber})
üõ† –£—Å–ª—É–≥–∞: ${service}
üìÖ –î–∞—Ç–∞: ${day}, ${date} ${month}
‚è∞ –í—Ä–µ–º—è: ${time}
üìç –ê–¥—Ä–µ—Å: ${address}

‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.`;

        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        this.showCustomAlert(message);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    showSuccessMessage() {
        if (this.tg) {
            this.tg.showAlert('‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.');
        } else {
            alert('‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.');
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showCustomAlert(message) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'notification-modal';
        modal.innerHTML = `
            <div class="notification-content">
                <div class="notification-header">
                    <h3>üéâ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</h3>
                    <button class="notification-close">&times;</button>
                </div>
                <div class="notification-body">
                    <pre>${message}</pre>
                </div>
                <div class="notification-actions">
                    <button class="btn-primary notification-ok">–ü–æ–Ω—è—Ç–Ω–æ</button>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        const style = document.createElement('style');
        style.textContent = `
            .notification-modal {
                display: flex;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.7);
                backdrop-filter: blur(10px);
                z-index: 2000;
                align-items: center;
                justify-content: center;
                animation: fadeIn 0.3s ease;
            }

            .notification-content {
                background: var(--card-background);
                backdrop-filter: blur(20px);
                border: 1px solid var(--border-color);
                border-radius: var(--ios-radius-large);
                width: 90%;
                max-width: 400px;
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
                animation: slideUp 0.3s ease;
            }

            .notification-header {
                padding: 20px 20px 16px;
                border-bottom: 1px solid var(--border-color);
                display: flex;
                align-items: center;
                justify-content: space-between;
                background: rgba(255, 255, 255, 0.02);
            }

            .notification-header h3 {
                font-size: 18px;
                font-weight: 600;
                color: var(--text-primary);
                margin: 0;
            }

            .notification-close {
                background: none;
                border: none;
                color: var(--text-secondary);
                cursor: pointer;
                padding: 8px;
                border-radius: var(--ios-radius-small);
                font-size: 20px;
                line-height: 1;
            }

            .notification-close:hover {
                background: rgba(255, 255, 255, 0.1);
                color: var(--text-primary);
            }

            .notification-body {
                padding: 20px;
            }

            .notification-body pre {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                white-space: pre-wrap;
                margin: 0;
                color: var(--text-primary);
                font-size: 14px;
                line-height: 1.5;
            }

            .notification-actions {
                padding: 0 20px 20px;
                display: flex;
                justify-content: center;
            }

            .notification-ok {
                padding: 12px 24px;
                background: var(--accent-color);
                color: white;
                border: none;
                border-radius: var(--ios-radius-medium);
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
                box-shadow: 0 2px 8px rgba(239, 75, 76, 0.3);
            }

            .notification-ok:hover {
                background: #d63031;
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(239, 75, 76, 0.4);
            }
        `;

        document.head.appendChild(style);
        document.body.appendChild(modal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = modal.querySelector('.notification-close');
        const okBtn = modal.querySelector('.notification-ok');
        
        const closeModal = () => {
            modal.remove();
            style.remove();
        };

        closeBtn.addEventListener('click', closeModal);
        okBtn.addEventListener('click', closeModal);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal();
            }
        });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏
    async sendCancellationNotification(bookingData) {
        if (!this.user || !this.user.id) {
            alert('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞');
            return;
        }

        const message = `‚ùå <b>–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞</b>

üöó <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> ${bookingData.car.brand} ${bookingData.car.model}
üõ† <b>–£—Å–ª—É–≥–∞:</b> ${bookingData.service}
üìÖ <b>–î–∞—Ç–∞:</b> ${bookingData.day}, ${bookingData.date} ${bookingData.month}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${bookingData.time}

‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.`;

        try {
            await fetch(`${this.apiUrl}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: this.user.id,
                    text: message,
                    parse_mode: 'HTML'
                })
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ:', error);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    getUserInfo() {
        return this.user || null;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp
    isTelegramWebApp() {
        return !!(window.Telegram && window.Telegram.WebApp);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.TelegramBot = TelegramBot;
